====== Ansible Configuration ======

{{tag>linux configuration ansible configuration_management}}

<affix offset-bottom="10" position-bottom="50" position-left="20">
<panel title="Configuration Management">
[[ansible|Ansible]]

[[salt|Salt]]

[[puppet|Puppet]]

</panel>
</affix>

<jumbotron>
===== Automation For Everyone =====
</jumbotron>

===== Compatability =====

|        ^ Tested ^
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=ubuntu|Ubuntu]]  | Yes | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=fedora|Fedora]]  | No | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=centos|CentOS]]  | No |
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=arch|Arch]]    | No  | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=windows|Windows]] | No |
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=osx|OS X]] | No | 

===== Software =====
[[linux:software:ssh|SSH]]

[[linux:software:ansible|Ansible]]

===== Links =====
[[https://www.ansible.com/|Ansible Website]]

[[https://docs.ansible.com/|Ansible Documentation]]

[[wp>Ansible_(software)]]

===== Procedure =====
==== Ubuntu 14.04 ====
=== Configuring Ansible Hosts ===
Ansible keeps track of all of the servers that it knows about through a "hosts" file. We need to set up this file first before we can begin to communicate with our other computers.

Open the file with root privileges like this:
<code bash>
sudo nano /etc/ansible/hosts
</code>

You will see a file that has a lot of example configurations, none of which will actually work for us since these hosts are made up. So to start, let's comment out all of the lines in this file by adding a "#" before each line.

We will keep these examples in the file to help us with configuration if we want to implement more complex scenarios in the future.

Once all of the lines are commented out, we can begin adding our actual hosts.

The hosts file is fairly flexible and can be configured in a few different ways. The syntax we are going to use though looks something like this:

Example hosts file
<code bash>
[group_name]
alias ansible_ssh_host=your_server_ip
</code>

The group_name is an organizational tag that lets you refer to any servers listed under it with one word. The alias is just a name to refer to that server.

So in our scenario, we are imagining that we have three servers we are going to control with Ansible. These servers are accessible from the Ansible droplet by typing:

<code bash>
ssh root@your_server_ip
</code>

You should not be prompted for a password if you have set this up correctly. We will assume that our droplets' IP addresses are 192.0.2.1, 192.0.2.2, and 192.0.2.3. We will set this up so that we can refer to these individually as host1, host2, and host3, or as a group as droplets.

This is the block that we should add to our hosts file to accomplish this:

<code bash>
[droplets]
host1 ansible_ssh_host=192.0.2.1
host2 ansible_ssh_host=192.0.2.2
host3 ansible_ssh_host=192.0.2.3
</code>

Hosts can be in multiple groups and groups can configure parameters for all of their members. Let's try this out now.

With our current settings, if we tried to connect to any of these hosts with Ansible, the command would fail (assuming you are not operating as the root user). This is because your SSH key is embedded for the root user on the remote systems and Ansible will by default try to connect as your current user. A connection attempt will get this error:

<code bash>
Ansible connection error
host1 | FAILED => SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue
</code>

On my Ansible computer, I'm using a user called demo. Ansible will try to connect to each host with ssh demo@server. This will not work if the demo user is not on the remote system.

We can create a file that tells all of the servers in the "droplets" group to connect using the root user.

To do this, we will create a directory in the Ansible configuration structure called group_vars. Within this folder, we can create YAML-formatted files for each group we want to configure:

<code bash>
sudo mkdir /etc/ansible/group_vars
sudo nano /etc/ansible/group_vars/droplets
</code>

We can put our configuration in here. YAML files start with ''- - -'', so make sure you don't forget that part.

<file bash /etc/ansible/group_vars/droplets>
---
ansible_ssh_user: root
</file>

Save and close this file when you are finished.

If you want to specify configuration details for every server, regardless of group association, you can put those details in a file at ''/etc/ansible/group_vars/all''. 

Individual hosts can be configured by creating files under a directory at ''/etc/ansible/host_vars''

==== Ubuntu 16.04 ====
Step 2 â€” Configuring Ansible Hosts
Ansible keeps track of all of the servers that it knows about through a "hosts" file. We need to set up this file first before we can begin to communicate with our other computers.

Open the file with root privileges like this:

<code bash>
sudo nano /etc/ansible/hosts
</code>

You will see a file that has a lot of example configurations, none of which will actually work for us since these hosts are made up. So to start, let's comment out all of the lines in this file by adding a "#" before each line.

We will keep these examples in the file to help us with configuration if we want to implement more complex scenarios in the future.

Once all of the lines are commented out, we can begin adding our actual hosts.

The hosts file is fairly flexible and can be configured in a few different ways. The syntax we are going to use though looks something like this:

<code bash>
Example hosts file
[group_name]
alias ansible_ssh_host=your_server_ip
</code>

The group_name is an organizational tag that lets you refer to any servers listed under it with one word. The alias is just a name to refer to that server.

So in our scenario, we are imagining that we have three servers we are going to control with Ansible. These servers are accessible from the Ansible server by typing:

<code bash>
ssh root@your_server_ip
</code>

You should not be prompted for a password if you have set this up correctly. We will assume that our servers' IP addresses are 192.0.2.1, 192.0.2.2, and 192.0.2.3. We will set this up so that we can refer to these individually as host1, host2, and host3, or as a group as servers.

This is the block that we should add to our hosts file to accomplish this:

<code bash>
[servers]
host1 ansible_ssh_host=192.0.2.1
host2 ansible_ssh_host=192.0.2.2
host3 ansible_ssh_host=192.0.2.3
</code>

Hosts can be in multiple groups and groups can configure parameters for all of their members. Let's try this out now.

With our current settings, if we tried to connect to any of these hosts with Ansible, the command would fail (assuming you are not operating as the root user). This is because your SSH key is embedded for the root user on the remote systems and Ansible will by default try to connect as your current user. A connection attempt will get this error:

<code bash>    
Ansible connection error
host1 | UNREACHABLE! => {
    "changed": false,
    "msg": "Failed to connect to the host via ssh.",
    "unreachable": true
}
</code>

On the Ansible server, we're using a user called demo. Ansible will try to connect to each host with

<code bash>
ssh demo@server
</code>

This will not work if the demo user is not on the remote system.

We can create a file that tells all of the servers in the ''servers'' group to connect using the root user.

To do this, we will create a directory in the Ansible configuration structure called ''group_vars''.
Within this folder, we can create YAML-formatted files for each group we want to configure

<code bash>
sudo mkdir /etc/ansible/group_vars
sudo nano /etc/ansible/group_vars/servers
</code>

We can put our configuration in here. YAML files start with ''- - -'', so make sure you don't forget that part.

<file bash /etc/ansible/group_vars/servers>
---
ansible_ssh_user: root
</file>

Save and close this file when you are finished.

If you want to specify configuration details for every server, regardless of group association, you can put those details in a file at ''/etc/ansible/group_vars/all''.

Individual hosts can be configured by creating files under a directory at ''/etc/ansible/host_vars''.

===== Notes =====
None
