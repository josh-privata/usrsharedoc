====== Ansible How-To ======

{{tag>linux how_to ansible configuration_management}}

<affix offset-bottom="10" position-bottom="50" position-left="20">
<panel title="Configuration Management">
[[ansible|Ansible]]

[[salt|Salt]]

[[puppet|Puppet]]

</panel>
</affix>

<jumbotron>
===== Automation For Everyone =====
</jumbotron>

===== Compatability =====

|        ^ Tested ^
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=ubuntu|Ubuntu]]  | Yes | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=fedora|Fedora]]  | No | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=centos|CentOS]]  | No |
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=arch|Arch]]    | No  | 
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=windows|Windows]] | No |
^ [[https://help.joshcannons.com/doku.php/tag/list?do=showtag&tag=osx|OS X]] | No |

===== Software =====
[[linux:software:ssh|SSH]]

[[linux:software:ansible|Ansible]]

===== Links =====
[[https://www.ansible.com/|Ansible Website]]

[[https://docs.ansible.com/|Ansible Documentation]]

[[wp>Ansible_(software)]]

===== Using Simple Ansible Commands =====
Now that we have our hosts set up and enough configuration details to allow us to successfully connect to our hosts, 
we can try out our very first command.

Ping all of the servers you configured by typing

<code bash>
ansible -m ping all
</code>

Ping output

<code bash>
host1 | success >> {
    "changed": false,
    "ping": "pong"
}

host3 | success >> {
    "changed": false,
    "ping": "pong"
}

host2 | success >> {
    "changed": false,
    "ping": "pong"
}
</code>

This is a basic test to make sure that Ansible has a connection to all of its hosts.

The ''all'' means all hosts. We could just as easily specify a group:

<code bash>
ansible -m ping droplets
</code>

We could also specify an individual host:

<code bash>
ansible -m ping host1
</code>

We can specify multiple hosts by separating them with colons:

<code bash>
ansible -m ping host1:host2
</code>

The ''-m ping'' portion of the command is an instruction to Ansible to use the ''ping'' module.
These are basically commands that you can run on your remote hosts. 
The ping module operates in many ways like the normal ping utility in Linux, but instead it checks for Ansible connectivity.

The ping module doesn't really take any arguments, but we can try another command to see how that works.
We pass arguments into a script by typing ''-a''.

The ''shell'' module lets us send a terminal command to the remote host and retrieve the results. 
For instance, to find out the memory usage on our host1 machine, we could use

<code bash>
ansible -m shell -a 'free -m' host1
</code>

Shell output

<code bash>
host1 | success | rc=0 >>
             total       used       free     shared    buffers     cached
Mem:          3954        227       3726          0         14         93
-/+ buffers/cache:        119       3834
Swap:            0          0          0
</code>

===== Notes =====
None
